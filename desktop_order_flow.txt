Desktop Version - Cart and Order Flow

1. Adding Items to Cart:
   - User browses products and clicks "Add to Cart".
   - Product details (id, name, price, image, quantity) are extracted from the product card or context.
   - Cart logic (js/cart.js) manages the cart state:
     - If logged in, cart is stored in Firebase under the user's ID.
     - If guest, cart is stored in Firebase under a guest ID (or localStorage as fallback).
     - If a guest logs in, guest cart is merged into the user's Firebase cart.
   - Cart count badge in navigation is updated in real-time.
   - Cart modal UI is dynamically created and updated to show current cart items.

2. Placing an Order:
   - User proceeds to checkout from the cart modal or cart page.
   - On the checkout page (checkout.html), a multi-step form collects:
     - Customer info (name, email, phone)
     - Shipping address
     - Payment method (currently only Cash on Delivery)
     - Review & confirm step
   - Order summary is shown with all cart items and calculated totals (subtotal, shipping, tax, discount).
   - Promo code can be applied for discounts (validated via Firebase).
   - On form submission:
     - Order data is assembled (customer, address, items, totals, promo).
     - Product images are converted to base64 for storage.
     - Order is saved to Firebase under the user's orders.
     - Promo usage is updated in Firebase if applied.
     - Cart is cleared after successful order.
   - User sees an order success modal with order number and details.

3. Viewing Orders:
   - User navigates to "My Orders" (orders.html).
   - Orders are fetched from Firebase for the logged-in user.
   - Orders are displayed as cards with status, date, and summary.
   - User can click an order to view details in a modal:
     - Shows all items, shipping address, order summary, and status history.
     - Allows downloading an invoice (as an image).
     - If within 24 hours and not cancelled, user can cancel the order.

Summary:
- Cart and order data are always persisted in Firebase for logged-in users.
- Guest carts are also stored in Firebase and merged on login.
- All flows (add to cart, checkout, order history) are managed via centralized JS modules.
- UI updates (cart badge, modals, order lists) are dynamic and reflect real-time data.
